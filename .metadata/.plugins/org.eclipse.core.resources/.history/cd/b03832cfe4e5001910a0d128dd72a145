package main.fr.ut2j.m1ice.ootesting;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class MyPointTest {

	private MyPoint point;
	private double newX;
	private double newY;

	@BeforeEach
	void setUp() throws Exception {
		point = new MyPoint();
		newX = Math.random();
		newY = Math.random();
	}

	@Test
	void testMyPoint1() {
		assertEquals(0d, point.getX(), 0.0001);
		assertEquals(0d, point.getY(), 0.0001);
	}
	
	@Test
	void testMyPoint2() {
		MyPoint point = new MyPoint(newX, newY);
		assertEquals(newX, point.getX(), 0.0001);
		assertEquals(newY, point.getY(), 0.0001);
	}
	
	@Test
	void testAccessorX() {
		point.setX(newX);
		assertEquals(newX, point.getX(), 0.0001);
	}

	@Test
	void testAccessorY() {
		point.setY(newY);
		assertEquals(newY, point.getY(), 0.0001);
	}
	
	@Test
	void testAccessorXdoubleNaN() {
		
		double oldX = point.getX();
		double newXnan = Double.NaN;
		point.setX(newXnan);
		boolean isNan = Double.isNaN(point.getX());
		assertFalse(isNan);
		assertEquals(oldX, point.getX(), 0.0001);
	}
	
	@Test
	void testAccessorYdoubleNaN() {
		
		double oldY = point.getY();
		double newYnull = Double.NaN;
		point.setY(newYnull);
		boolean isNan = Double.isNaN(point.getY());
		assertFalse(isNan);
		assertEquals(oldY, point.getY(), 0.0001);
	}
	
	@Test
	void testMyPoint3() {
		MyPoint point = new MyPoint(newX, newY);
		MyPoint newPoint = new MyPoint(point);
		assertEquals(point.getX(), newPoint.getX(), 0.0001);
		assertEquals(point.getY(), newPoint.getY(), 0.0001);
		assertNotSame(newPoint, point);
	}
	
	@Test
	void testMyPoint3null() {
		MyPoint point = null;
		MyPoint newPoint = new MyPoint(point);
		assertEquals(0d, newPoint.getX(), 0.0001);
		assertEquals(0d, newPoint.getY(), 0.0001);
		assertNotSame(newPoint, point);
	}
	
	@Test
	void testScale() {
		MyPoint point = new MyPoint(newX, newY);
		double scaleValue = Math.random();
		MyPoint newPoint = point.scale(scaleValue);
		assertEquals(point.getX() * scaleValue, newPoint.getX(), 0.0001);
		assertEquals(point.getY() * scaleValue, newPoint.getY(), 0.0001);
	}
}
